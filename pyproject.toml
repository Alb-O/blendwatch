[project]
name = "blendwatch"
version = "0.1.0"
description = "Track and updated linked assets in Blender on a large filesystem."
authors = [{ name = "Albert O'Shea", email = "albertoshea2@gmail.com" }]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "watchdog>=4.0.0",
    "click>=8.1.0",
    "colorama>=0.4.6",
    "tomli>=2.0.0",
    "blender-asset-tracer>=1.19",
    "zstandard (>=0.23.0,<0.24.0)",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
]

[project.scripts]
blendwatch = "blendwatch.cli:main"

[tool.poetry]
packages = [{ include = "blendwatch", from = "src" }]
include = ["src/blendwatch/*.toml"]

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-asyncio = "^0.21.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/blendwatch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
